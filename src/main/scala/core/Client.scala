package core

import util.Log

import scala.collection.mutable

/**
  * Client
  *
  * @param id            - client id
  * @param state         - state replica received from server
  * @param serverVersion - server's version corresponding to the initial state
  */
class Client(id: Int, val state: State, serverVersion: Version) extends Log {
  private val ot = new OT
  /**
    * infra.Client replica version.
    * sentMessages - messages generated by the client
    * receivedMessages - all messages generated by server
    */
  private var version: Version = Version(0, receivedMessages = serverVersion.sentMessages)
  /**
    * Local operations log - only includes operations generated by the client
    */
  private var oplog: mutable.Seq[OpWithVersion] = mutable.Seq.empty[OpWithVersion]

  /**
    * Apply local operation to the state.
    *
    * @param op - operation
    * @return - clients version to report to server with the operation
    */
  def applyLocal(op: Op): Version = {
    state(op)
    oplog :+= OpWithVersion(op, version)
    val v = version
    version = version.sent()
    v
  }

  /**
    * Process operation received from server.
    *
    * @param op            - operation
    * @param serverVersion - server's version
    */
  def update(op: Op, serverVersion: Version): Unit = {
    if (log.isDebugEnabled)
      log.debug(s"Processing update from server: $op, $serverVersion. Current state: $id, $state, $version")
    //server version contains:
    // sentMessages - all messages sent from server since initial server state/server state reset
    // receivedMessages - messages received by server from this client
    //exclude client messages that have already been processed by server
    oplog = oplog.dropWhile(_.version.sentMessages < serverVersion.receivedMessages)

    //apply the operation transformed to include local operations
    var transformed = op
    for (i <- oplog.indices) {
      val (to, loggedOp) = ot.transform(transformed, oplog(i).op)
      transformed = to
      oplog(i) = oplog(i).copy(op = loggedOp)
    }
    state(transformed)
    //mark received message
    version = version.received()
    if (log.isDebugEnabled)
      log.debug(s"Processed update from server: $op, $serverVersion. New state: $state.")
  }
}
